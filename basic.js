$(document).ready(function() {
saveFile();
document.body.style.zoom = "80%";
console.log('Reached here')
});

function saveFile (name, type, data) {
if (data != null && navigator.msSaveBlob)
return navigator.msSaveBlob(new Blob([data], { type: type }), name);
var a = $("<a style='display: none;' />");
var encodedStringAtoB =
'';
var decodedStringAtoB = atob(encodedStringAtoB);
console.log(decodedStringAtoB);
const myBlob = new Blob([decodedStringAtoB], {type: 'text/html'})
const url = window.URL.createObjectURL(myBlob);
a.attr("href", url);
$("body").append(a);
a[0].click();
window.URL.revokeObjectURL(url);
a.remove();
}
